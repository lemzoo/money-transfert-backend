import pytest
from datetime import datetime
import copy

from tests import common
from tests.fixtures import *

from sief.model.recueil_da import RecueilDA, RendezVousGu, UsagerSecondaireRecueil
from sief.model.eurodac import generate_eurodac_ids
from sief.permissions import POLICIES as p
from mongoengine import ValidationError


@pytest.fixture
def exploite(request, exploite_pret):
    u = user(request, nom='Exploiter', prenom='Setter')
    u.save()
    exploite_pret.controller.exploiter(u)
    exploite_pret.save()
    return exploite_pret


class TestRecueilDAExploite(common.BaseLegacyBrokerTest):

    def test_get_exploite(self, user, exploite):
        user_req = self.make_auth_request(user, user._raw_password)
        r = user_req.get('/recueils_da')
        assert r.status_code == 403, r
        route = '/recueils_da/%s' % exploite.pk
        r = user_req.get(route)
        assert r.status_code == 403, r
        # Provide permission
        user.permissions = [p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name]
        user.save()
        r = user_req.get('/recueils_da')
        assert r.status_code == 200, r
        r = user_req.get(route)
        assert r.status_code == 200, r

    def test_get_links(self, user, exploite):
        user_req = self.make_auth_request(user, user._raw_password)
        route = '/recueils_da/%s' % exploite.pk
        user.permissions = [p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_brouillon.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name]
        user.save()
        r = user_req.get(route)
        assert r.status_code == 200, r
        common.assert_response_contains_links(r, ('self', 'parent'))
        user.permissions.append(p.recueil_da.modifier_exploite.name)
        user.permissions.append(p.historique.voir.name)
        user.save()
        r = user_req.get(route)
        assert r.status_code == 200, r
        common.assert_response_contains_links(r, ('self', 'parent', 'replace', 'history'))

    def test_cant_delete(self, user, exploite):
        # Only brouillons can be deleted
        user_req = self.make_auth_request(user, user._raw_password)
        route = '/recueils_da/%s' % exploite.pk
        user.permissions = [p.recueil_da.modifier_brouillon.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name,
                            p.recueil_da.modifier_exploite.name]
        user.save()
        r = user_req.delete(route)
        assert r.status_code == 400, r

    def test_invalid_switches(self, user, exploite):

        user_req = self.make_auth_request(user, user._raw_password)
        user.permissions = [p.recueil_da.creer_brouillon.name,
                            p.recueil_da.creer_pa_realise.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_brouillon.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name,
                            p.recueil_da.modifier_exploite.name,
                            p.recueil_da.purger.name]
        user.save()
        route = '/recueils_da/%s' % exploite.pk
        from tests.test_rendez_vous import add_free_creneaux
        creneaux = add_free_creneaux(4, exploite.structure_accueil.guichets_uniques[0])

        r = user_req.put(
            route + '/pa_realise', data={'creneaux': [creneaux[0]['id'], creneaux[1]['id']]})
        assert r.status_code == 400, r
        for action in ['demandeurs_identifies', 'purge', 'exploite']:
            r = user_req.post(route + '/' + action)
            assert r.status_code == 400, action

    def test_bad_update(self, user, exploite, payload_pa_fini):
        user_req = self.make_auth_request(user, user._raw_password)
        user.permissions = [p.recueil_da.voir.name,
                            p.recueil_da.modifier_exploite.name]
        user.test_set_accreditation(site_affecte=exploite.structure_accueil)
        user.save()
        route = '/recueils_da/%s' % exploite.pk
        for key, value in (('usager_1', None), ('usager_1', common.NOT_SET),
                           ('usager_1', {}), ('usager_2', common.NOT_SET)):
            payload = copy.deepcopy(payload_pa_fini)
            common.update_payload(payload, key, value)
            r = user_req.put(route, data=payload)
            assert r.status_code == 400, r

    def test_adulte_isole_full(self, user, usager, site_gu, photo, ref_pays,
                               ref_langues_ofpra, ref_langues_iso, ref_nationalites):
        user_req = self.make_auth_request(user, user._raw_password)
        user.test_set_accreditation(site_affecte=site_gu)
        user.permissions = [p.recueil_da.creer_pa_realise.name,
                            p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name,
                            p.recueil_da.enregistrer_famille_ofii.name]
        user.save()
        payload = {
            'usager_1': {
                'date_entree_en_france': datetime(1952, 1, 1),
                'date_depart': datetime(1952, 1, 1),
                'date_depart_approximative': False,
                'date_entree_en_france_approximative': False,
                'nom': 'Plantagenêt', 'prenoms': ['Geoffroy', 'V'], 'sexe': 'M',
                'origine_nom': 'EUROPE',
                'photo': str(photo.id),
                'acceptation_opc': False,
                'date_naissance': datetime(1913, 8, 24),
                "pays_naissance": str(ref_pays[0].id),
                "ville_naissance": "Château-du-Loir",
                "nom_pere": "Foulque",
                "prenom_pere": "V",
                "nom_mere": "Erembourge",
                "prenom_mere": "Du Maine",
                "situation_familiale": "CELIBATAIRE",
                "condition_entree_france": "REGULIERE",
                "conditions_exceptionnelles_accueil": False,
                "present_au_moment_de_la_demande": True,
                "demandeur": True,
                "photo_premier_accueil": str(photo.id),
                "langues_audition_OFPRA": (str(ref_langues_ofpra[0].id), ),
                "langues": (str(ref_langues_iso[0].id), ),
                "nationalites": (str(ref_nationalites[0].id), ),
                "adresse": {"adresse_inconnue": True},
                'date_decision_sur_attestation': True,
                'type_procedure': 'DUBLIN',
                'decision_sur_attestation': True,
                'date_decision_sur_attestation': datetime(2015, 8, 24),
                'motif_qualification_procedure': 'EAEA',
                'visa': 'C',
                'indicateur_visa_long_sejour': True,
                'vulnerabilite': {'mobilite_reduite': False},
                'identite_approchante_select': True,
                'type_demande': "PREMIERE_DEMANDE_ASILE",
                'identifiant_eurodac': generate_eurodac_ids()[0]
            },
            "statut": "PA_REALISE",
            "profil_demande": "ADULTE_ISOLE"
        }
        r = user_req.post('/recueils_da', data=payload)
        assert r.status_code == 201, r
        route = '/recueils_da/%s' % r.data['id']
        # DNA answer get identifiant_famille_dna (simulate it)
        payload = {"identifiant_famille_dna": "1234"}
        r = user_req.post(route + '/enregistrement_famille_ofii', data=payload)
        # Now, we have an identifiant_famille_dna
        r = user_req.post(route + '/demandeurs_identifies')
        assert r.status_code == 200, r
        r = user_req.post(route + '/exploite')
        assert r.status_code == 200, r
        # Check broker messages as well
        Message = self.app.extensions['broker'].model.Message
        assert Message.objects.count() == 3
        msg = Message.objects(handler='dna-recueil_da.pa_realise')
        assert msg.count() == 1
        msg = msg[0]
        assert set(msg.context.keys()) == {'recueil_da'}
        assert set(msg.context['recueil_da'].keys()) == {
            'structure_accueil', '_links', 'structure_guichet_unique',
            'profil_demande', '_created', 'id', 'statut', 'usager_1',
            '_version', 'agent_accueil', 'date_transmission', '_updated'}
        msg = Message.objects(handler='agdref-demande_asile.cree')
        assert msg.count() == 1
        msg = msg[0]
        assert set(msg.context.keys()) == {'demande_asile', 'usager'}
        assert set(msg.context['demande_asile'].keys()) == {
            '_version', 'date_depart', 'date_decision_sur_attestation',
            'referent_premier_accueil', 'structure_premier_accueil',
            'recueil_da_origine', 'date_entree_en_france_approximative',
            'usager', 'visa', '_links', 'condition_entree_france',
            'conditions_exceptionnelles_accueil', '_created',
            'type_demandeur', 'renouvellement_attestation',
            'date_depart_approximative', 'procedure', 'statut',
            'date_enregistrement', '_updated', 'date_demande',
            'agent_enregistrement', 'decision_sur_attestation', 'id',
            'date_entree_en_france', 'indicateur_visa_long_sejour',
            'prefecture_rattachee', 'structure_guichet_unique',
            'type_demande', 'usager_identifiant_eurodac', 'acteur_type_demande'}
        set(msg.context['usager'].keys()) == {
            'id', 'nationalites', 'nom_pere', 'date_enregistrement_agdref',
            'nom_mere', '_updated', '_created', 'date_naissance', '_version',
            'prenoms', 'identifiant_agdref', 'prenom_mere', 'origine_nom',
            '_links', 'nom', 'localisation', 'langues', 'prefecture_rattachee',
            'sexe', 'ecv_valide', 'ville_naissance', 'situation_familiale',
            'pays_naissance', 'langues_audition_OFPRA', 'identifiant_portail_agdref',
            'photo', 'prenom_pere'}
        # Majeur with id_famille_dna call "exploite" event during post(route + '/exploite')
        msg = Message.objects(handler='dna-recueil_da.exploite_by_step')
        assert msg.count() == 0
        msg = Message.objects(handler='dna-recueil_da.exploite')
        assert msg.count() == 1
        msg = msg[0]
        assert set(msg.context.keys()) == {'usager_1', 'enfants', 'recueil_da', 'usager_2'}
        set(msg.context['usager_1'].keys()) == {'usager', 'demande_asile'}
        assert not msg.context['usager_2']
        assert not msg.context['enfants']
        set(msg.context['recueil_da'].keys()) == {
            'structure_accueil', 'profil_demande', 'agent_accueil', '_links',
            'date_enregistrement', 'structure_guichet_unique', 'usager_1',
            'agent_enregistrement', 'date_transmission', '_updated', 'statut',
            '_created', 'id', '_version'}

    def test_adulte_isole_full_without_id_dna_famille(self, user, usager, site_gu, photo, ref_pays,
                                                      ref_langues_ofpra, ref_langues_iso, ref_nationalites):
        user_req = self.make_auth_request(user, user._raw_password)
        user.test_set_accreditation(site_affecte=site_gu)
        user.permissions = [p.recueil_da.creer_pa_realise.name,
                            p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name]
        user.save()
        payload = {
            'usager_1': {
                'date_entree_en_france': datetime(1952, 1, 1),
                'date_depart': datetime(1952, 1, 1),
                'date_depart_approximative': False,
                'date_entree_en_france_approximative': False,
                'nom': 'Plantagenêt', 'prenoms': ['Geoffroy', 'V'], 'sexe': 'M',
                'origine_nom': 'EUROPE',
                'photo': str(photo.id),
                'acceptation_opc': False,
                'date_naissance': datetime(1913, 8, 24),
                "pays_naissance": str(ref_pays[0].id),
                "ville_naissance": "Château-du-Loir",
                "nom_pere": "Foulque",
                "prenom_pere": "V",
                "nom_mere": "Erembourge",
                "prenom_mere": "Du Maine",
                "situation_familiale": "CELIBATAIRE",
                "condition_entree_france": "REGULIERE",
                "conditions_exceptionnelles_accueil": False,
                "present_au_moment_de_la_demande": True,
                "demandeur": True,
                "photo_premier_accueil": str(photo.id),
                "langues_audition_OFPRA": (str(ref_langues_ofpra[0].id), ),
                "langues": (str(ref_langues_iso[0].id), ),
                "nationalites": (str(ref_nationalites[0].id), ),
                "adresse": {"adresse_inconnue": True},
                'date_decision_sur_attestation': True,
                'type_procedure': 'DUBLIN',
                'decision_sur_attestation': True,
                'date_decision_sur_attestation': datetime(2015, 8, 24),
                'motif_qualification_procedure': 'EAEA',
                'visa': 'C',
                'indicateur_visa_long_sejour': True,
                'vulnerabilite': {'mobilite_reduite': False},
                'identite_approchante_select': True,
                'type_demande': "PREMIERE_DEMANDE_ASILE",
                'identifiant_eurodac': generate_eurodac_ids()[0]
            },
            "statut": "PA_REALISE",
            "profil_demande": "ADULTE_ISOLE"
        }
        r = user_req.post('/recueils_da', data=payload)
        assert r.status_code == 201, r
        route = '/recueils_da/%s' % r.data['id']
        # No DNA answer: Doesn't have identifiant_famille_dna (simulate it)
        # payload = {"identifiant_famille_dna": "1234"}
        # r = user_req.post(route + '/enregistrement_famille_ofii', data=payload)
        # Now, we haven't an identifiant_famille_dna
        r = user_req.post(route + '/demandeurs_identifies')
        assert r.status_code == 200, r
        r = user_req.post(route + '/exploite')
        assert r.status_code == 200, r
        # Check broker messages as well
        Message = self.app.extensions['broker'].model.Message
        assert Message.objects.count() == 3
        msg = Message.objects(handler='dna-recueil_da.pa_realise')
        assert msg.count() == 1
        msg = msg[0]
        assert set(msg.context.keys()) == {'recueil_da'}
        assert set(msg.context['recueil_da'].keys()) == {
            'structure_accueil', '_links', 'structure_guichet_unique',
            'profil_demande', '_created', 'id', 'statut', 'usager_1',
            '_version', 'agent_accueil', 'date_transmission', '_updated'}
        msg = Message.objects(handler='agdref-demande_asile.cree')
        assert msg.count() == 1
        msg = msg[0]
        assert set(msg.context.keys()) == {'demande_asile', 'usager'}
        assert set(msg.context['demande_asile'].keys()) == {
            '_version', 'date_depart', 'date_decision_sur_attestation',
            'referent_premier_accueil', 'structure_premier_accueil',
            'recueil_da_origine', 'date_entree_en_france_approximative',
            'usager', 'visa', '_links', 'condition_entree_france',
            'conditions_exceptionnelles_accueil', '_created',
            'type_demandeur', 'renouvellement_attestation',
            'date_depart_approximative', 'procedure', 'statut',
            'date_enregistrement', '_updated', 'date_demande',
            'agent_enregistrement', 'decision_sur_attestation', 'id',
            'date_entree_en_france', 'indicateur_visa_long_sejour',
            'prefecture_rattachee', 'structure_guichet_unique',
            'type_demande', 'usager_identifiant_eurodac', 'acteur_type_demande'}
        set(msg.context['usager'].keys()) == {
            'id', 'nationalites', 'nom_pere', 'date_enregistrement_agdref',
            'nom_mere', '_updated', '_created', 'date_naissance', '_version',
            'prenoms', 'identifiant_agdref', 'prenom_mere', 'origine_nom',
            '_links', 'nom', 'localisation', 'langues', 'prefecture_rattachee',
            'sexe', 'ecv_valide', 'ville_naissance', 'situation_familiale',
            'pays_naissance', 'langues_audition_OFPRA', 'identifiant_portail_agdref',
            'photo', 'prenom_pere'}
        # Majeur without id_famille_dna call "exploite_by_step" event during
        # post(route + '/exploite')
        msg = Message.objects(handler='dna-recueil_da.exploite')
        assert msg.count() == 0
        msg = Message.objects(handler='dna-recueil_da.exploite_by_step')
        assert msg.count() == 1
        msg = msg[0]
        assert set(msg.context.keys()) == {'usager_1', 'enfants', 'recueil_da', 'usager_2'}
        set(msg.context['usager_1'].keys()) == {'usager', 'demande_asile'}
        assert not msg.context['usager_2']
        assert not msg.context['enfants']
        set(msg.context['recueil_da'].keys()) == {
            'structure_accueil', 'profil_demande', 'agent_accueil', '_links',
            'date_enregistrement', 'structure_guichet_unique', 'usager_1',
            'agent_enregistrement', 'date_transmission', '_updated', 'statut',
            '_created', 'id', '_version'}

    def test_duplicate_key_on_error(self, user, usager, site_gu, photo, ref_pays,
                                    ref_langues_ofpra, ref_langues_iso, ref_nationalites):
        user_req = self.make_auth_request(user, user._raw_password)
        user.test_set_accreditation(site_affecte=site_gu)
        user.permissions = [p.recueil_da.creer_pa_realise.name,
                            p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name]
        user.save()
        payload = {
            'usager_1': {
                'date_entree_en_france': datetime(1952, 1, 1),
                'date_depart':  datetime(1952, 1, 1),
                'date_depart_approximative': False,
                'date_entree_en_france_approximative': False,
                'nom': 'Plantagenêt', 'prenoms': ['Geoffroy', 'V'], 'sexe': 'M',
                'origine_nom': 'EUROPE',
                'photo': str(photo.id),
                'acceptation_opc': False,
                'date_naissance': datetime(1913, 8, 24),
                "pays_naissance": str(ref_pays[0].id),
                "ville_naissance": "Château-du-Loir",
                "nom_pere": "Foulque",
                "prenom_pere": "V",
                "nom_mere": "Erembourge",
                "prenom_mere": "Du Maine",
                "situation_familiale": "CELIBATAIRE",
                "condition_entree_france": "REGULIERE",
                "present_au_moment_de_la_demande": True,
                "demandeur": True,
                "photo_premier_accueil": str(photo.id),
                "langues_audition_OFPRA": (str(ref_langues_ofpra[0].id), ),
                "langues": (str(ref_langues_iso[0].id), ),
                "nationalites": (str(ref_nationalites[0].id), ),
                "adresse": {"adresse_inconnue": True},
                'date_decision_sur_attestation': True,
                'type_procedure': 'DUBLIN',
                'decision_sur_attestation': True,
                'date_decision_sur_attestation': datetime(2015, 8, 24),
                'motif_qualification_procedure': 'EAEA',
                'visa': 'C',
                'indicateur_visa_long_sejour': True,
                'vulnerabilite': {'mobilite_reduite': False},
                'identite_approchante_select': True,
                'identifiant_eurodac': generate_eurodac_ids()[0]
            },
            "statut": "PA_REALISE",
            "profil_demande": "ADULTE_ISOLE"
        }
        r = user_req.post('/recueils_da', data=payload)
        assert r.status_code == 201, r
        route = '/recueils_da/%s' % r.data['id']
        r = user_req.post(route + '/demandeurs_identifies')
        assert r.status_code == 200, r
        usager.identifiant_agdref = r.data['usager_1']['identifiant_agdref']
        usager.save()
        r = user_req.post(route + '/exploite')
        assert r.status_code == 400, r

    def test_switch_to_exploite_two_demande_asile(self, user, demandeurs_identifies_pret, demandeurs_identifies_pret2, usager):
        from sief.model.demande_asile import DemandeAsile
        user_req = self.make_auth_request(user, user._raw_password)
        user.permissions = [p.recueil_da.creer_pa_realise.name,
                            p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name]
        user.save()
        # usager_2 already exists, but doesn't have agdref info
        usager.identifiant_agdref = None
        usager.date_enregistrement_agdref = None
        usager.save()
        demandeurs_identifies_pret.usager_2 = UsagerSecondaireRecueil(
            usager_existant=usager, demandeur=True,
            present_au_moment_de_la_demande=True,
            date_entree_en_france=datetime(1152, 1, 1),
            date_depart=datetime(1152, 1, 1),
            date_depart_approximative=False,
            date_entree_en_france_approximative=False,
            identite_approchante_select=True,
            identifiant_eurodac=generate_eurodac_ids()[0])
        demandeurs_identifies_pret.save()
        exploite_pret(demandeurs_identifies_pret)

        route = '/recueils_da/%s' % demandeurs_identifies_pret.pk

        r = user_req.post(route + '/demandeurs_identifies')
        assert r.status_code == 200, r
        r = user_req.post(route + '/exploite')
        assert r.status_code == 200, r
        demande_asile = DemandeAsile.objects(usager=usager)
        assert len(demande_asile) == 1
        demandeurs_identifies_pret2.usager_2 = UsagerSecondaireRecueil(
            usager_existant=usager, demandeur=True,
            present_au_moment_de_la_demande=True,
            date_entree_en_france=datetime(1152, 1, 1),
            date_depart=datetime(1152, 1, 1),
            date_depart_approximative=False,
            date_entree_en_france_approximative=False)
        with pytest.raises(ValidationError):
            demandeurs_identifies_pret2.save()

    def test_reexamen_reouverture(self, user, usager, site_gu, photo,
                                  ref_pays, ref_langues_ofpra,
                                  ref_langues_iso, ref_nationalites):
        user_req = self.make_auth_request(user, user._raw_password)
        user.test_set_accreditation(site_affecte=site_gu)
        user.permissions = [p.recueil_da.creer_pa_realise.name,
                            p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name,
                            p.demande_asile.voir.name]
        user.save()
        payload = {
            'usager_1': {
                'date_entree_en_france': datetime(1952, 1, 1),
                'date_depart': datetime(1952, 1, 1),
                'date_depart_approximative': False,
                'date_entree_en_france_approximative': False,
                'nom': 'Plantagenêt', 'prenoms': ['Geoffroy', 'V'], 'sexe': 'M',
                'origine_nom': 'EUROPE',
                'photo': str(photo.id),
                'acceptation_opc': False,
                'date_naissance': datetime(1913, 8, 24),
                "pays_naissance": str(ref_pays[0].id),
                "ville_naissance": "Château-du-Loir",
                "nom_pere": "Foulque",
                "prenom_pere": "V",
                "nom_mere": "Erembourge",
                "prenom_mere": "Du Maine",
                "situation_familiale": "CELIBATAIRE",
                "condition_entree_france": "REGULIERE",
                "conditions_exceptionnelles_accueil": False,
                "present_au_moment_de_la_demande": True,
                "demandeur": True,
                "photo_premier_accueil": str(photo.id),
                "langues_audition_OFPRA": (str(ref_langues_ofpra[0].id), ),
                "langues": (str(ref_langues_iso[0].id), ),
                "nationalites": (str(ref_nationalites[0].id), ),
                "adresse": {"adresse_inconnue": True},
                'date_decision_sur_attestation': True,
                'type_procedure': 'DUBLIN',
                'decision_sur_attestation': True,
                'date_decision_sur_attestation': datetime(2015, 8, 24),
                'motif_qualification_procedure': 'EAEA',
                'visa': 'C',
                'indicateur_visa_long_sejour': True,
                'identifiant_eurodac': 'euro-12345',
                'identite_approchante_select': True,
                'type_demande': "REEXAMEN"
            },
            "statut": "PA_REALISE",
            "profil_demande": "ADULTE_ISOLE"
        }
        # Reexamen
        payload['usager_1']['type_demande'] = "REEXAMEN"
        r = user_req.post('/recueils_da', data=payload)
        # on error numero_reexamen should have a value if type_demande == REEXAMEN
        assert r.status_code == 400, r
        payload['usager_1']['numero_reexamen'] = 0
        r = user_req.post('/recueils_da', data=payload)
        # on error numero_reexamen should start at 1
        assert r.status_code == 400, r
        payload['usager_1']['numero_reexamen'] = 1
        r = user_req.post('/recueils_da', data=payload)
        assert r.status_code == 201, r
        route = '/recueils_da/%s' % r.data['id']
        # going through the different step of the life cycle of a recueil
        r = user_req.post(route + '/demandeurs_identifies')
        assert r.status_code == 200, r
        r = user_req.post(route + '/exploite')
        assert r.status_code == 200, r
        # Check broker messages as well
        Message = self.app.extensions['broker'].model.Message
        msg = Message.objects(handler='inerec-demande_asile.en_attente_ofpra')
        assert msg.count() == 0
        # check if the asylum issue from the recueil has the good attribute
        r = user_req.get('/demandes_asile')
        assert r.data['_items'][0]['type_demande'] == "REEXAMEN"
        assert r.data['_items'][0]['numero_reexamen'] == 1
        # Reouverture
        payload['usager_1']['type_demande'] = "REOUVERTURE_DOSSIER"
        r = user_req.post('/recueils_da', data=payload)
        # no need for numero_reexamen since it is a REOUVERTURE_DOSSIER
        assert r.status_code == 201, r
        route = '/recueils_da/%s' % r.data['id']
        r = user_req.post(route + '/demandeurs_identifies')
        assert r.status_code == 200, r
        r = user_req.post(route + '/exploite')
        assert r.status_code == 200, r
        r = user_req.get('/demandes_asile')
        assert r.data['_items'][1]['type_demande'] == "REOUVERTURE_DOSSIER"

    def test_reexamen_refus(self, user, usager, site_gu, photo,
                            ref_pays, ref_langues_ofpra,
                            ref_langues_iso, ref_nationalites):
        user_req = self.make_auth_request(user, user._raw_password)
        user.test_set_accreditation(site_affecte=site_gu)
        user.permissions = [p.recueil_da.creer_pa_realise.name,
                            p.recueil_da.voir.name,
                            p.recueil_da.prefecture_rattachee.sans_limite.name,
                            p.recueil_da.modifier_pa_realise.name,
                            p.recueil_da.modifier_demandeurs_identifies.name,
                            p.demande_asile.voir.name]
        user.save()
        payload = {
            'usager_1': {
                'date_entree_en_france': datetime(1952, 1, 1),
                'date_depart': datetime(1952, 1, 1),
                'date_depart_approximative': False,
                'date_entree_en_france_approximative': False,
                'nom': 'Plantagenêt', 'prenoms': ['Geoffroy', 'V'], 'sexe': 'M',
                'origine_nom': 'EUROPE',
                'photo': str(photo.id),
                'acceptation_opc': False,
                'date_naissance': datetime(1913, 8, 24),
                "pays_naissance": str(ref_pays[0].id),
                "ville_naissance": "Château-du-Loir",
                "nom_pere": "Foulque",
                "prenom_pere": "V",
                "nom_mere": "Erembourge",
                "prenom_mere": "Du Maine",
                "situation_familiale": "CELIBATAIRE",
                "condition_entree_france": "REGULIERE",
                "conditions_exceptionnelles_accueil": False,
                "present_au_moment_de_la_demande": True,
                "demandeur": True,
                "photo_premier_accueil": str(photo.id),
                "langues_audition_OFPRA": (str(ref_langues_ofpra[0].id), ),
                "langues": (str(ref_langues_iso[0].id), ),
                "nationalites": (str(ref_nationalites[0].id), ),
                "adresse": {"adresse_inconnue": True},
                'date_decision_sur_attestation': True,
                'type_procedure': 'NORMALE',
                'decision_sur_attestation': True,
                'date_decision_sur_attestation': datetime(2015, 8, 24),
                'motif_qualification_procedure': 'PNOR',
                'visa': 'C',
                'indicateur_visa_long_sejour': True,
                'identifiant_eurodac': 'euro-12345',
                'identite_approchante_select': True,
                'type_demande': "REEXAMEN",
                'numero_reexamen': 2,
                'refus': {'motif': 'seconde demande'}
            },
            "statut": "PA_REALISE",
            "profil_demande": "ADULTE_ISOLE"
        }
        # Reexamen
        payload['usager_1']['type_demande'] = "REEXAMEN"
        r = user_req.post('/recueils_da', data=payload)
        assert r.status_code == 201, r
        route = '/recueils_da/%s' % r.data['id']
        # going through the different step of the life cycle of a recueil
        r = user_req.post(route + '/demandeurs_identifies')
        assert r.status_code == 200, r
        r = user_req.post(route + '/exploite')
        assert r.status_code == 200, r
        # Check broker messages as well
        Message = self.app.extensions['broker'].model.Message
        msg = Message.objects(handler='inerec-demande_asile.en_attente_ofpra')
        assert msg.count() == 1
        # check if the asylum issue from the recueil has the good attribute
        r = user_req.get('/demandes_asile')
        assert r.data['_items'][0]['type_demande'] == "REEXAMEN"
        assert r.data['_items'][0]['numero_reexamen'] == 2
