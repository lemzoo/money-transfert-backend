from connector.agdref.communes import COMMUNES


not_found_keep = object()


class Translator():

    def __init__(self, translation_table, padding_out=0,
                 not_found_in=not_found_keep, not_found_out=not_found_keep):
        self.not_found_in = not_found_in
        self.not_found_out = not_found_out
        self.tt = translation_table
        self.padding_out = padding_out

    @staticmethod
    def apply_padding(value, padding):
        to_pad = padding - len(value)
        if to_pad > 0:
            return value + ' ' * to_pad
        else:
            return value

    # LOAD : VERS API
    def translate_in(self, value):
        if not value:
            return None
        value = value.lower()
        for api, target in self.tt:
            if value == target.lower():
                return api
        # TODO: raise exception but now just return None
        return value if self.not_found_in is not_found_keep else self.not_found_in

    # DUMP : VERS WSDL
    def translate_out(self, value):
        if not value:
            return None
        value = value.lower()
        for api, target in self.tt:
            if value == api.lower():
                return self.apply_padding(target, self.padding_out)
        return value if self.not_found_out is not_found_keep else self.not_found_out

PAYS = (
    ('XXX', 'ZZZ'),
    ('AFG', 'AFG'),
    ('ALB', 'AL'),
    ('DZA', 'DZ'),
    ('AGO', 'PAN'),
    ('ARG', 'RA'),
    ('ARM', 'ZAR'),
    ('AUS', 'AUS'),
    ('AUT', 'A'),
    ('AZE', 'AZE'),
    ('BHS', 'BS'),
    ('BGD', 'BD'),
    ('BLR', 'ZBR'),
    ('BEL', 'B'),
    ('BLZ', 'ZBE'),
    ('BEN', 'DY'),
    ('BTN', 'BOU'),
    ('BOL', 'BO'),
    ('BIH', 'BOS'),
    ('BWA', 'BP'),
    ('BRA', 'BR'),
    ('BRN', 'BRU'),
    ('BGR', 'BG'),
    ('BFA', 'HV'),
    ('BDI', 'OUR'),
    ('CIV', 'CI'),
    ('KHM', 'K'),
    ('CMR', 'TC'),
    ('CAN', 'CDN'),
    ('CAF', 'RCA'),
    ('TCD', 'TCH'),
    ('CHL', 'RCH'),
    ('CHN', 'RPC'),
    ('CHN', 'RPC'),
    ('COL', 'CO'),
    ('COG', 'RCB'),
    ('CRI', 'CR'),
    ('HRV', 'CRO'),
    ('CUB', 'C'),
    ('CYP', 'CY'),
    ('CZE', 'RTC'),
    ('COD', 'RDC'),
    ('PRK', 'COR'),
    ('DNK', 'DK'),
    ('DJI', 'DJ'),
    ('DOM', 'DOM'),
    ('ECU', 'EC'),
    ('EGY', 'ET'),
    ('SLV', 'SAL'),
    ('GNQ', 'GQ'),
    ('ERI', 'ZRY'),
    ('EST', 'ZES'),
    ('ETH', 'ETH'),
    ('FJI', 'FJ'),
    ('FIN', 'SF'),
    ('FRA', 'F'),
    ('GAB', 'GA'),
    ('GMB', 'WAG'),
    ('GEO', 'ZGE'),
    ('ALL', 'D'),
    ('DEU', 'ZDA'),
    ('DDR', 'RDA'),
    ('XXX', 'ZZZ'),
    ('GHA', 'GH'),
    ('GRC', 'GR'),
    ('GTM', 'GCA'),
    ('GIN', 'GU'),
    ('GNB', 'GW'),
    ('GUY', 'GY'),
    ('HTI', 'RH'),
    ('HND', 'HO'),
    ('HUN', 'H'),
    ('ISL', 'IS'),
    ('IND', 'IND'),
    ('IDN', 'RI'),
    ('IRN', 'IR'),
    ('IRQ', 'IRQ'),
    ('GBR', 'GB'),
    ('IRL', 'EIR'),
    ('ISR', 'IL'),
    ('ITA', 'I'),
    ('JAM', 'JA'),
    ('JPN', 'J'),
    ('JOR', 'JOR'),
    ('KAZ', 'KAZ'),
    ('KEN', 'EAK'),
    ('KOR', 'SCO'),
    ('KWT', 'KO'),
    ('KGZ', 'KIR'),
    ('LAO', 'LAO'),
    ('LVA', 'ZLE'),
    ('LBN', 'LIB'),
    ('LSO', 'PB'),
    ('LBR', 'LBA'),
    ('LBY', 'LT'),
    ('LTU', 'ZLI'),
    ('LUX', 'L'),
    ('MKD', 'RMA'),
    ('MDG', 'RM'),
    ('MWI', 'NP'),
    ('MYS', 'PTM'),
    ('MLI', 'MLI'),
    ('MRT', 'RIM'),
    ('MEX', 'MEX'),
    ('MDA', 'MOL'),
    ('MNG', 'MN'),
    ('MNE', 'ME'),
    ('MAR', 'MA'),
    ('MOZ', 'PM'),
    ('MMR', 'BUR'),
    ('BUR', 'BUR'),
    ('NAM', 'ZNA'),
    ('NPL', 'NE'),
    ('NLD', 'NL'),
    ('NZL', 'NZ'),
    ('NIC', 'NIC'),
    ('NER', 'NIG'),
    ('NGA', 'WAN'),
    ('NOR', 'N'),
    ('OMN', 'OM'),
    ('PAK', 'PAK'),
    ('PAL', 'ZPA'),
    ('PAN', 'PA'),
    ('PNG', 'PG'),
    ('PRY', 'PAY'),
    ('PER', 'PE'),
    ('PHL', 'PI'),
    ('POL', 'PL'),
    ('PRT', 'P'),
    ('PRI', 'PR'),
    ('QAT', 'Q'),
    ('ROM', 'R'),
    ('RUS', 'ZRU'),
    ('RWA', 'RU'),
    ('SSD', 'SSD'),
    ('SAU', 'ARS'),
    ('SEN', 'SN'),
    ('SRB', 'RS'),
    ('SLE', 'WAL'),
    ('SVK', 'SVQ'),
    ('SVN', 'SLO'),
    ('SLB', 'SL'),
    ('SOM', 'SP'),
    ('ZAF', 'ZA'),
    ('ESP', 'E'),
    ('LKA', 'CL'),
    ('SDN', 'SAE'),
    ('SUR', 'SME'),
    ('SWZ', 'SD'),
    ('SWE', 'S'),
    ('CHE', 'CH'),
    ('SYR', 'SYR'),
    ('TWN', 'TW'),
    ('TJK', 'TAD'),
    ('TZA', 'EAT'),
    ('THA', 'T'),
    ('TMP', 'TMP'),
    ('TGO', 'TT'),
    ('TTO', 'TD'),
    ('TUN', 'TU'),
    ('TUR', 'TR'),
    ('TKM', 'TUR'),
    ('UGA', 'EAU'),
    ('UKR', 'ZUK'),
    ('ARE', 'AE'),
    ('USA', 'USA'),
    ('URY', 'U'),
    ('UZB', 'OUZ'),
    ('VUT', 'ZVA'),
    ('VEN', 'YV'),
    ('VNM', 'VN'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('YEM', 'YEM'),
    ('YEN', 'Y'),
    ('YMD', 'ADN'),
    ('ZMB', 'NR'),
    ('ZWE', 'SR'),
    ('XXA', 'APA'),
    ('ESH', 'SAH'),
    ('XXX', 'ZZZ'),
    ('GRL', 'DKG'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('AND', 'AND'),
    ('ATG', 'ZAN'),
    ('BGL', 'BGL'),
    ('BHR', 'BH'),
    ('BRB', 'BDS'),
    ('XXX', 'ZZZ'),
    ('CEY', 'ZCL'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('COM', 'KM'),
    ('CPV', 'CV'),
    ('CSK', 'CS'),
    ('XXX', 'ZZZ'),
    ('DMA', 'DM'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('FSM', 'MIC'),
    ('XXX', 'ZZZ'),
    ('GRD', 'WG'),
    ('XXX', 'ZZZ'),
    ('HKG', 'GBK'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('KIR', 'ZKR'),
    ('RKS', 'RKS'),
    ('LCA', 'WL'),
    ('LIE', 'FL'),
    ('XXX', 'ZZZ'),
    ('MCO', 'MC'),
    ('XXX', 'ZZZ'),
    ('MDV', 'MV'),
    ('MHL', 'MAR'),
    ('MLT', 'GBY'),
    ('MUS', 'MS'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('NKA', 'ZNV'),
    ('KNA', 'ZKI'),
    ('KNA', 'ZCN'),
    ('NRU', 'ZNU'),
    ('XXX', 'ZZZ'),
    ('PLW', 'PLW'),
    ('SCG', 'SB'),
    ('XXX', 'ZZZ'),
    ('SGP', 'SGP'),
    ('XXX', 'ZZZ'),
    ('XXX', 'ZZZ'),
    ('SMR', 'RSM'),
    ('STP', 'ST'),
    ('SUN', 'SU'),
    ('SYC', 'SY'),
    ('TIB', 'ZTI'),
    ('XXX', 'ZZZ'),
    ('TON', 'TO'),
    ('TUV', 'ZTU'),
    ('VAT', 'V'),
    ('VCT', 'WV'),
    ('WSM', 'WS'),
    ('YUG', 'YU'),
    ('ZAR', 'CB'),
    ('XXX', 'ZZZ'),
    ('AIA', 'GBI'),
    ('ANT', 'NA'),
    ('BMU', 'GBB'),
    ('D', '  SA'),
    ('FLK', 'GBF'),
    ('GIB', 'GBZ'),
    ('SCG', 'SKO'),
    ('IMN', 'GAM'),
    ('GGY', 'GBG'),
    ('JEY', 'GBJ'),
    ('XXX', 'ZZZ')
)


NATIONALITE = (
    ('ZZZ', 'ZZZ'),
    ('AFG', 'AFG'),
    ('ALB', 'AL'),
    ('DZA', 'DZ'),
    ('AGO', 'PAN'),
    ('ARG', 'RA'),
    ('ARM', 'ZAR'),
    ('AUS', 'AUS'),
    ('AUT', 'A'),
    ('AZE', 'AZE'),
    ('BHS', 'BS'),
    ('BGD', 'BD'),
    ('BLR', 'ZBR'),
    ('BEL', 'B'),
    ('BLZ', 'ZBE'),
    ('BEN', 'DY'),
    ('BTN', 'BOU'),
    ('BOL', 'BO'),
    ('BIH', 'BOS'),
    ('BWA', 'BP'),
    ('BRA', 'BR'),
    ('BRN', 'BRU'),
    ('BGR', 'BG'),
    ('BFA', 'HV'),
    ('BDI', 'OUR'),
    ('CIV', 'CI'),
    ('KHM', 'K'),
    ('CMR', 'TC'),
    ('CAN', 'CDN'),
    ('CAN', 'NF'),
    ('CAF', 'RCA'),
    ('TCD', 'TCH'),
    ('CHL', 'RCH'),
    ('CHN', 'RPC'),
    ('CHN', 'GBK'),
    ('COL', 'CO'),
    ('COG', 'RCB'),
    ('COM', 'KM'),
    ('CRI', 'CR'),
    ('HRV', 'CRO'),
    ('CUB', 'C'),
    ('CYP', 'CY'),
    ('CZE', 'RTC'),
    ('COD', 'RDC'),
    ('PRK', 'COR'),
    ('DNK', 'DK'),
    ('DNK', 'DKG'),
    ('DJI', 'DJ'),
    ('DOM', 'DOM'),
    ('ECU', 'EC'),
    ('EGY', 'ET'),
    ('SLV', 'SAL'),
    ('GNQ', 'GQ'),
    ('ERI', 'ZRY'),
    ('EST', 'ZES'),
    ('ETH', 'ETH'),
    ('FLK', 'ZZZ'),
    ('FJI', 'FJ'),
    ('FIN', 'SF'),
    ('FRA', 'F'),
    ('GAB', 'GA'),
    ('GMB', 'WAG'),
    ('GEO', 'ZGE'),
    ('DEU', 'D'),
    ('ZZZ', 'ZDA'),
    ('ZZZ', 'RDA'),
    ('GHA', 'GH'),
    ('GRC', 'GR'),
    ('GTM', 'GCA'),
    ('GIN', 'GU'),
    ('GNB', 'GW'),
    ('GUY', 'GY'),
    ('HTI', 'RH'),
    ('HND', 'HO'),
    ('HUN', 'H'),
    ('ISL', 'IS'),
    ('IND', 'IND'),
    ('IDN', 'RI'),
    ('IDN', 'CNB'),
    ('IDN', 'NGN'),
    ('IRN', 'IR'),
    ('IRQ', 'IRQ'),
    ('IRL', 'EIR'),
    ('ISR', 'IL'),
    ('ITA', 'I'),
    ('JAM', 'JA'),
    ('JPN', 'J'),
    ('JOR', 'JOR'),
    ('KAZ', 'KAZ'),
    ('KEN', 'EAK'),
    ('KOR', 'SCO'),
    ('KWT', 'KO'),
    ('KGZ', 'KIR'),
    ('LAO', 'LAO'),
    ('LVA', 'ZLE'),
    ('LBN', 'LIB'),
    ('LSO', 'ZZZ'),
    ('LBR', 'LBA'),
    ('LBY', 'LT'),
    ('LTU', 'ZLI'),
    ('LUX', 'L'),
    ('MKD', 'RMA'),
    ('MDG', 'RM'),
    ('MWI', 'NP'),
    ('MYS', 'PTM'),
    ('MYS', 'SK'),
    ('MLI', 'MLI'),
    ('MRT', 'RIM'),
    ('MEX', 'MEX'),
    ('MDA', 'MOL'),
    ('MNG', 'MN'),
    ('MNE', 'ME'),
    ('MAR', 'MA'),
    ('MOZ', 'PM'),
    ('MMR', 'BUR'),
    ('NAM', 'ZNA'),
    ('NPL', 'NE'),
    ('NLD', 'NL'),
    ('NLD', 'NA'),
    ('NLD', 'CU'),
    ('NZL', 'NZ'),
    ('NIC', 'NIC'),
    ('NER', 'NIG'),
    ('NGA', 'WAN'),
    ('NOR', 'N'),
    ('OMN', 'OM'),
    ('PAK', 'PAK'),
    ('PSE', 'ZPA'),
    ('PAN', 'PA'),
    ('PNG', 'PG'),
    ('PRY', 'PAY'),
    ('PER', 'PE'),
    ('PHL', 'PI'),
    ('POL', 'PL'),
    ('PRT', 'P'),
    ('PRI', 'PR '),
    ('QAT', 'Q'),
    ('ROU', 'R'),
    ('RUS', 'ZRU'),
    ('RWA', 'RU'),
    ('SDN', 'SAE'),
    ('SSD', 'SSD'),
    ('SAU', 'ARS'),
    ('SEN', 'SN'),
    ('SRB', 'RS'),
    ('SLE', 'WAL'),
    ('SVK', 'SVQ'),
    ('SVK', 'RSL'),
    ('SVN', 'SLO'),
    ('SLB', 'SL'),
    ('SOM', 'SP'),
    ('ZAF', 'ZA'),
    ('ESP', 'E'),
    ('LKA', 'CL'),
    ('SUR', 'SME'),
    ('SWZ', 'SD'),
    ('SWE', 'S'),
    ('CHE', 'CH'),
    ('SYR', 'SYR'),
    ('TWN', 'TW'),
    ('TWN', 'RC'),
    ('TJK', 'TAD'),
    ('TZA', 'EAT'),
    ('THA', 'T'),
    ('TLS', 'TMP'),
    ('TGO', 'TT'),
    ('TTO', 'TD'),
    ('TUN', 'TU'),
    ('TUR', 'TR'),
    ('TKM', 'TUR'),
    ('UGA', 'EAU'),
    ('UKR', 'ZUK'),
    ('ARE', 'AE'),
    ('GBR', 'GBA'),
    ('GBR', 'GBB'),
    ('GBR', 'GBZ'),
    ('GBR', 'GB'),
    ('GBR', 'GBI'),
    ('GBR', 'GBF'),
    ('GBR', 'GAM'),
    ('GBR', 'GBG'),
    ('GBR', 'GBJ'),
    ('GBR', 'GBX'),
    ('GBR', 'IRL'),
    ('USA', 'USA'),
    ('URY', 'U'),
    ('UZB', 'OUZ'),
    ('VUT', 'ZVA'),
    ('VEN', 'YV'),
    ('VNM', 'VN'),
    ('YEM', 'YEM'),
    ('YEM', 'Y'),
    ('YEM', 'ADN'),
    ('ZMB', 'NR'),
    ('ZWE', 'SR'),
    ('APA', 'APA'),
    ('ESH', 'SAH'),
    ('NCL', 'ZZZ'),
    ('-99', 'ZZZ'),
    ('ATA', 'ZZZ'),
    ('ATF', 'ZZZ'),
    ('GRL', 'ZZZ'),
    ('ZZZ', 'AND'),
    ('ZZZ', 'ZAC'),
    ('ZZZ', 'ZAN'),
    ('ZZZ', 'BH'),
    ('ZZZ', 'BDS'),
    ('CPV', 'CV'),
    ('ZZZ', 'CS'),
    ('ZZZ', 'DM'),
    ('ZZZ', 'MIC'),
    ('ZZZ', 'WG'),
    ('ZZZ', 'WV'),
    ('ZZZ', 'HK'),
    ('ZZZ', 'ZKR'),
    ('ZZZ', 'ZKU'),
    ('ZZZ', 'WL'),
    ('ZZZ', 'FL'),
    ('ZZZ', 'MC'),
    ('ZZZ', 'MV'),
    ('ZZZ', 'MAR'),
    ('ZZZ', 'GBY'),
    ('MUS', 'MS'),
    ('ZZZ', 'ZNU'),
    ('ZZZ', 'PLW'),
    ('ZZZ', 'SA'),
    ('ZZZ', 'SGP'),
    ('ZZZ', 'RSM'),
    ('ZZZ', 'ST'),
    ('ZZZ', 'SU'),
    ('ZZZ', 'SY'),
    ('ZZZ', 'ZTI'),
    ('ZZZ', 'TO'),
    ('ZZZ', 'WS'),
    ('ZZZ', 'YU'),
    ('ZZZ', 'CB'),
    ('ZZZ', 'SB'),
    ('ZZZ', 'V'),
    ('ZZZ', 'ZNV'),
    ('ZZZ', 'ZKI'),
    ('ZZZ', 'ZCN'),
    ('ZZZ', 'ZTU'),
    ('RKS', 'RKS'),
    ('ZZZ', 'SKO'),
    ('ZZZ', 'BGL'),
    ('ZZZ', 'PB'),
    ('ZZZ', 'ZBA'),
    ('ZZZ', 'ZCL'),
    ('ZZZ', 'ZDZ'),
)

LANGUES = ((None, None))

PROCEDURE = (
    ('NORMALE', 'N'),
    ('ACCELEREE', 'A'),
    ('DUBLIN', 'D'),
    ('', 'P'),
    ('', 'R')
)


SITUATION_FAMILIALE = (
    ("CELIBATAIRE", "C"),
    ("DIVORCE", "D"),
    ("MARIE", "M"),
    # ("CONCUBIN", "K"),
    ("CONCUBIN", "C"),
    ("SEPARE", "S"),
    # ("PACSE", "P"),
    ("PACSE", "C"),
    ("VEUF", "V"),
)


VOIE = (('rue', 'RUE'),
        ('boulevard', 'BV'),
        ('avenue', 'AV'))


CONDITION_ENTREE_FRANCE = (
    ('REGULIERE', 'N'),
    ('IRREGULIERE', 'I'),
    ('', 'F')
)


ORIGINE_NOM = (
    ('EUROPE', 'E'),
    ('ARABE', 'A'),
    ('CHINOISE', 'C'),
    ('TURQUE/AFRIQ', 'A')
)


def insee_to_libelle(address):
    return COMMUNES.get(address.get('code_insee'), address.get('ville')) or ''


voie_trans = Translator(VOIE, padding_out=3, not_found_in=None, not_found_out='RUE')
langue_trans = Translator(LANGUES)
proc_trans = Translator(PROCEDURE)
pays_trans = Translator(PAYS, padding_out=3, not_found_in='XXX', not_found_out='INC')
nationalite_trans = Translator(NATIONALITE, padding_out=3, not_found_in='ZZZ', not_found_out='INC')
sit_fam_trans = Translator(SITUATION_FAMILIALE)
cond_entree_france_trans = Translator(CONDITION_ENTREE_FRANCE)
origine_nom_trans = Translator(ORIGINE_NOM)
