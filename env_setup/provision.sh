#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
set -o xtrace

PYTHON_VERSION="3.4.5"
PYTHON_BIN="/usr/local/bin/python3.4"
PYTHON_ARCHIVE_FILE="Python-${PYTHON_VERSION}.tgz"
PYTHON_ARCHIVE_URL="https://www.python.org/ftp/python/${PYTHON_VERSION}/${PYTHON_ARCHIVE_FILE}"

SOLR_VERSION="5.1.0"
SOLR_ARCHIVE_FILE="solr-${SOLR_VERSION}.tgz"
SOLR_ARCHIVE_URL="http://archive.apache.org/dist/lucene/solr/${SOLR_VERSION}/${SOLR_ARCHIVE_FILE}"

MONGO_VERSION="3.0.5"
MONGO_ARCHIVE_FILE="mongodb-linux-x86_64-${MONGO_VERSION}.tgz"
MONGO_ARCHIVE_URL="https://fastdl.mongodb.org/linux/${MONGO_ARCHIVE_FILE}"

ERLANG_VERSION="18.3"
ERLANG_ARCHIVE_FILE="esl-erlang_${ERLANG_VERSION}-1~ubuntu~trusty_amd64.deb"
ERLANG_ARCHIVE_URL="http://packages.erlang-solutions.com/site/esl/esl-erlang/FLAVOUR_1_general/${ERLANG_ARCHIVE_FILE}"

RABBITMQ_VERSION="3.6.6"
RABBITMQ_ARCHIVE_FILE="rabbitmq-server_${RABBITMQ_VERSION}-1_all.deb"
RABBITMQ_ARCHIVE_URL="https://www.rabbitmq.com/releases/rabbitmq-server/v${RABBITMQ_VERSION}/rabbitmq-server_${RABBITMQ_VERSION}-1_all.deb"

USER_EMAIL="admin@test.com"
USER_PASSWORD="P@ssw0rd"

function update_ubuntu() {
    apt-get update
    apt-get -y upgrade
    apt-get -y autoremove
}

function install_ubuntu_dependencies() {
    apt-get install -y build-essential emacs24-nox htop ntp git unzip openjdk-8-jre-headless vim-nox
}

function cached_download() {
    local shared_cache_dir="/vagrant/sief-back/downloads"
    local file="${1}"
    local url="${2}"

    if test -f "${shared_cache_dir}/${file}"
    then
        cp "${shared_cache_dir}/${file}" .
    else
        wget --output-document="${file}" "${url}"
        mkdir -p "${shared_cache_dir}"
        cp "${file}" "${shared_cache_dir}"
    fi
}

function install_python3() {
    apt-get install -y libssl-dev openssl
    cached_download "${PYTHON_ARCHIVE_FILE}" "${PYTHON_ARCHIVE_URL}"
    tar xzf "${PYTHON_ARCHIVE_FILE}"
    pushd "Python-${PYTHON_VERSION}"
    ./configure
    make
    make install
    popd
}

function install_solr() {
    cached_download "${SOLR_ARCHIVE_FILE}" "${SOLR_ARCHIVE_URL}"

    tar xzf "${SOLR_ARCHIVE_FILE}" "solr-${SOLR_VERSION}/bin/install_solr_service.sh" --strip-components=2
    bash ./install_solr_service.sh "${SOLR_ARCHIVE_FILE}" -u root

    /opt/solr/bin/solr create -c sief
    /opt/solr/bin/solr create -c sief-test

    cp /vagrant/sief-back/misc/schema.xml /var/solr/data/sief/conf/managed-schema
    cp /vagrant/sief-back/misc/solrconfig.xml /var/solr/data/sief/conf/solrconfig.xml
    cp /vagrant/sief-back/misc/schema.xml /var/solr/data/sief-test/conf/managed-schema
    cp /vagrant/sief-back/misc/solrconfig.xml /var/solr/data/sief-test/conf/solrconfig.xml

    service solr restart
}

function install_mongo() {
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
    echo "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-3.0.list

    apt-get update
    apt-get install -y mongodb-org="${MONGO_VERSION}" \
        mongodb-org-server="${MONGO_VERSION}" \
        mongodb-org-shell="${MONGO_VERSION}" \
        mongodb-org-mongos="${MONGO_VERSION}" \
        mongodb-org-tools="${MONGO_VERSION}"

    echo "mongodb-org hold" | dpkg --set-selections
    echo "mongodb-org-server hold" | dpkg --set-selections
    echo "mongodb-org-shell hold" | dpkg --set-selections
    echo "mongodb-org-mongos hold" | dpkg --set-selections
    echo "mongodb-org-tools hold" | dpkg --set-selections

    cp /vagrant/sief-back/env_setup/mongodb.service /etc/systemd/system
    systemctl enable mongodb
    systemctl start mongodb
}

function install_rabbit() {
    echo 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list
    wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -
    apt-get update
    apt-get install -y rabbitmq-server

    cp /vagrant/sief-back/env_setup/rabbitmq.config /etc/rabbitmq/

    rabbitmq-plugins enable rabbitmq_management
    rabbitmqctl add_user developer P@ssw0rd
    rabbitmqctl add_vhost siaef
    rabbitmqctl set_user_tags developer administrator
    rabbitmqctl set_permissions -p siaef developer ".*" ".*" ".*"

    service rabbitmq-server restart
}

function as_ubuntu_user() {
    local args="$@"
    su ubuntu -c "source /home/ubuntu/.profile ; ${args}"
}

function setup_environment() {
    pip3 install virtualenv
    as_ubuntu_user virtualenv -p "${PYTHON_BIN}" /home/ubuntu/venv --always-copy
    echo "# Generated by provision.sh" >> /home/ubuntu/.profile
    echo "export LC_CTYPE=en_US.UTF-8" >> /home/ubuntu/.profile
    echo "source ~/venv/bin/activate" >> /home/ubuntu/.profile
    echo "source /vagrant/sief-back/env_setup/set_env" >> /home/ubuntu/.profile
    as_ubuntu_user pip install -Ur requirements.txt
}

function cleanup_cache() {
     find . \( -name \*.pyc -o -name \*.pyo -o -name __pycache__ \) -delete
}

function init_app() {
    as_ubuntu_user ./manage.py datamodel init
    as_ubuntu_user ./manage.py referentials load_default
    as_ubuntu_user ./manage.py user add_admin -n Test -p Test -e "${USER_EMAIL}" -P "${USER_PASSWORD}"
    as_ubuntu_user ./manage.py user create_3rd_party
    as_ubuntu_user ./manage.py solr build -y

    echo -e "Your environment is ready to be use"
    echo -e "The credential of the default admin are:"
    echo -e "email: ${USER_EMAIL}"
    echo -e "password: ${USER_PASSWORD}"
}

function populate() {
    as_ubuntu_user POPULATE_DB=true ./manage.py populate database --fake -u 10 -p "${USER_PASSWORD}"
    as_ubuntu_user ./manage.py solr rebuild -y

    echo "Password used for the populate: ${USER_PASSWORD}"
}

# This function is ugly, remove if problematic
function make_prompt_pretty()
{
    sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/' /home/ubuntu/.bashrc
    echo 'PS1=`echo $PS1 | sed '"'"'s/..$/$(__git_ps1)\\$ /'"'"'`' >> /home/ubuntu/.bashrc
}

function end_message() {
    set +o xtrace
    echo "-------------------------------------------------------"
    echo "Installation correcte"
    echo "/!\ A utiliser avec la branche git corespondante au front /!\ "
    echo "Le dossier /sief-back/ de votre machine, correspond au dossier /vagrant/sief-back de la Machine Virtuel (VM) "
    echo "Lancement du serveur : $ ./manage.py runserver --host=0.0.0.0"
    echo "-------------------------------------------------------"
}

cd /tmp

update_ubuntu
install_ubuntu_dependencies
install_python3
install_solr
install_mongo
install_rabbit

cd /vagrant/sief-back

setup_environment
cleanup_cache
init_app
populate
make_prompt_pretty
end_message
