'''
Login/Password Auth Module
'''

from datetime import datetime
from mongoengine import EmbeddedDocument, fields
from Flask import g

from .common import AuthModule, LoginError


class SystemLoginDocument(EmbeddedDocument):
    login = fields.StringField(unique=True, sparse=True)


class SystemAuthModule(AuthModule):

    """
    Auth module for authentication with login/mdp
    """

    def _register_route(self):
        # Token is generated by hand, so no need for api
        pass

    def token_authentication(self, token, must_be_fresh=False):
        # Token must be passed as header (`{"Authorization": "Token <token>"}`)
        g._token = token
        if not token or token['type'] != 'auth':
            raise LoginError()
        if must_be_fresh and (
                not token['fresh'] or token['freshness_exp'] < datetime.utcnow().timestamp()):
            raise LoginError('Token must be fresh')
        user_cls = self.user_cls
        try:
            user_lookup = {'%s__login' % self.auth_field: token['login']}
            user = user_cls.objects.get(**user_lookup)
        except user_cls.DoesNotExist:
            raise LoginError()
        user._token_fresh = token['fresh']
        return user
