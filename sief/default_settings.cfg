from os import environ, path


def _environ_bool(var, default='false'):
    return environ.get(var, default).lower() == 'true'


def _environ_int(var, default):
    return int(environ.get(var, default))


def _environ_float(var, default):
    return float(environ.get(var, default))


FAKE_ON_DNA = _environ_bool('FAKE_ON_DNA', 'false')  # TODO: remove me !

ENABLE_CACHE = _environ_bool('ENABLE_CACHE', 'false')

### App ###
SECRET_KEY = environ.get('SECRET_KEY', 'secret_for_test_only')
BACKEND_API_PREFIX = environ.get('BACKEND_API_PREFIX', '')
BACKEND_URL_DOMAIN = environ.get('BACKEND_URL_DOMAIN', 'http://127.0.0.1:5000')
BACKEND_URL = BACKEND_URL_DOMAIN + BACKEND_API_PREFIX
assert not BACKEND_URL_DOMAIN.endswith('/')
assert not BACKEND_API_PREFIX or (BACKEND_API_PREFIX.startswith('/') and not BACKEND_API_PREFIX.endswith('/'))
# Host the frontend in the static directory and serve it as root of the application
FRONTEND_HOSTED = environ.get('FRONTEND_HOSTED', False)
assert not FRONTEND_HOSTED or BACKEND_API_PREFIX, 'FRONTEND_HOSTED requires BACKEND_API_PREFIX'
# Frontend is hosted on another website, we act as a proxy
FRONTEND_HOSTED_REDIRECT_URL = environ.get('FRONTEND_HOSTED_REDIRECT_URL', '')
# FRONTEND_URL = environ.get('FRONTEND_HOSTED_REDIRECT_URL')
REFERENTIALS_CACHE_TIMEOUT = _environ_int('REFERENTIALS_CACHE_TIMEOUT', 600)
FRONTEND_DOMAIN = environ.get('FRONTEND_DOMAIN', 'https://asile.dgef.interieur.gouv.fr')
FRONTEND_DOMAIN_INTRANET = environ.get('FRONTEND_DOMAIN_INTRANET', 'https://asile.dgef.minint.fr')

### MongoPatcher ###
MONGOPATCHER_PATCHES_DIR = path.abspath(path.dirname(__file__)) + '/../datamodel_patches'

### Fichiers ###
FICHIER_URL_VALIDITY = environ.get('FICHIER_URL_VALIDITY', 24 * 3600) # default: 1 day
FICHIERS_ALLOWED_EXTENSIONS = ['jpg', 'png', 'jpeg']
assert not next((x for x in FICHIERS_ALLOWED_EXTENSIONS if not x.islower()), None), \
       "extensions must be in lowercase"

### MongoDB ###
MONGODB_URL = environ.get('MONGODB_URL', 'mongodb://localhost:27017/sief')
# Flask-mongoengine use MONGODB_HOST variable to configure mongodb connection
MONGODB_HOST = MONGODB_URL
MONGODB_TEST_URL = environ.get('MONGODB_TEST_URL', 'mongodb://localhost:27017/sief-test')

### Broker ###
BROKER_DB_URL = environ.get('BROKER_DB_URL', 'mongodb://localhost:27017/sief-broker')
BROKER_TEST_DB_URL = environ.get('BROKER_TEST_DB_URL', 'mongodb://localhost:27017/sief-test-broker')
BROKER_RABBIT_MONGODB_URL = environ.get('BROKER_RABBIT_MONGODB_URL', 'mongodb://localhost:27017/sief-broker-rabbit')
BROKER_TEST_RABBIT_MONGODB_URL = environ.get('BROKER_TEST_RABBIT_MONGODB_URL', 'mongodb://localhost:27017/sief-test-broker-rabbit')
BROKER_API_PREFIX = (BACKEND_API_PREFIX or '') + '/broker'
ALERT_MAIL_BROKER = [mail.strip() for mail in environ.get('ALERT_MAIL_BROKER', '').split(',') if mail.strip()]
### RabbitMQ ###
DISABLE_EVENTS = _environ_bool('DISABLE_EVENTS')
DISABLE_RABBIT = _environ_bool('DISABLE_RABBIT')
BROKER_RABBIT_URL = environ.get('BROKER_RABBIT_URL', 'amqp://developer:P@ssw0rd@localhost:5672/siaef')
BROKER_TEST_RABBIT_URL = environ.get('BROKER_TEST_RABBIT_URL', 'amqp://guest:guest@localhost:5672/%2F')
BROKER_RABBIT_EXCHANGE = environ.get('BROKER_RABBIT_EXCHANGE', 'siaef')
BROKER_TEST_RABBIT_EXCHANGE = environ.get('BROKER_TEST_RABBIT_EXCHANGE', 'siaef-test')
BROKER_RABBIT_API_PREFIX = (BACKEND_API_PREFIX or '') + '/rabbit'
### Solr ###
DISABLE_SOLR = _environ_bool('DISABLE_SOLR')
SOLR_URL = environ.get('SOLR_URL', 'http://localhost:8983/solr/sief')
SOLR_TEST_URL = environ.get('SOLR_TEST_URL', 'http://localhost:8983/solr/sief-test')

### Populate DB ###
POPULATE_DB = environ.get('POPULATE_DB', '').lower() == 'true'

### Connectors ###
CONNECTORS_API_PREFIX = (BACKEND_API_PREFIX or '') + '/connectors'
CONNECTORS_DEBUG = _environ_bool('CONNECTORS_DEBUG')

# FNE
DISABLE_FNE = _environ_bool('DISABLE_FNE')
FNE_CACHE_TIMEOUT = _environ_int('FNE_CACHE_TIMEOUT', 600)
FNE_TESTING_STUB = _environ_bool('FNE_TESTING_STUB')
FNE_URL = environ.get('FNE_URL', 'http://127.0.0.1')
FNE_HTTP_PROXY = environ.get('FNE_HTTP_PROXY', '')
FNE_HTTPS_PROXY = environ.get('FNE_HTTPS_PROXY', '')

# FPR
DISABLE_FPR = _environ_bool('DISABLE_FPR')
FPR_CACHE_TIMEOUT = _environ_int('FPR_CACHE_TIMEOUT', 600)
FPR_TESTING_STUB = _environ_bool('FPR_TESTING_STUB')
FPR_WSDL_URL = environ.get('FPR_WSDL_URL', '')
FPR_FORCE_QUERY_URL = environ.get('FPR_FORCE_QUERY_URL', '')
FPR_HTTP_PROXY = environ.get('FPR_HTTP_PROXY', '')
FPR_HTTPS_PROXY = environ.get('FPR_HTTPS_PROXY', '')
FPR_IDENTIFICATION_APPLICATION = environ.get('FPR_IDENTIFICATION_APPLICATION', '')
FPR_IDENTIFICATION_PARAMETRE = environ.get('FPR_IDENTIFICATION_PARAMETRE', '')
FPR_IDENTIFICATION_COMMANDE = environ.get('FPR_IDENTIFICATION_COMMANDE', '')
FPR_INFOTRACE_IDENTIFIANT = environ.get('FPR_INFOTRACE_IDENTIFIANT', '')
FPR_INFOTRACE_POSTE = environ.get('FPR_INFOTRACE_POSTE', '')
FPR_INFOTRACE_SCOM = environ.get('FPR_INFOTRACE_SCOM', '')
FPR_CONTACT_TIMEOUT = environ.get('FPR_CONTACT_TIMEOUT', 30)
FPR_CERTIFICATE = environ.get('FPR_CERTIFICATE', '')

# AGDREF NUMBER
DISABLE_AGDREF_NUM = _environ_bool('DISABLE_AGDREF_NUM')
AGDREF_NUM_TESTING_STUB = _environ_bool('AGDREF_NUM_TESTING_STUB')
AGDREF_NUM_URL = environ.get('AGDREF_NUM_URL')
EURODAC_PREFIX = environ.get('EURODAC_PREFIX', 'XXX')

# AGDREF
DISABLE_CONNECTOR_AGDREF = environ.get('DISABLE_CONNECTOR_AGDREF', '').lower() == 'true'
DISABLE_CONNECTOR_AGDREF_INPUT = environ.get('DISABLE_CONNECTOR_AGDREF', '').lower() == 'true'
CONNECTOR_AGDREF_PARTIAL = environ.get('CONNECTOR_AGDREF_PARTIAL', '').lower() == 'true'
CONNECTOR_AGDREF_URL = environ.get('CONNECTOR_AGDREF_URL', 'http://127.0.0.1')
CONNECTOR_AGDREF_USERNAME = environ.get('CONNECTOR_AGDREF_USERNAME', 'agdref@connector.com')
CONNECTOR_AGDREF_PASSWORD = environ.get('CONNECTOR_AGDREF_PASSWORD', '')
CONNECTOR_AGDREF_PREFIX = BACKEND_API_PREFIX + '/connectors/agdref'
CONNECTOR_AGDREF_HTTPS_PROXY = environ.get('CONNECTOR_AGDREF_HTTPS_PROXY', '')
CONNECTOR_AGDREF_HTTP_PROXY = environ.get('CONNECTOR_AGDREF_HTTP_PROXY', '')
CONNECTOR_AGDREF_SERVER = environ.get('CONNECTOR_AGDREF_SERVER', '')
CONNECTOR_AGDREF_EXPOSED_URL = environ.get('CONNECTOR_AGDREF_EXPOSED_URL', '')

# DNA
DISABLE_CONNECTOR_DNA = _environ_bool('DISABLE_CONNECTOR_DNA')
DISABLE_CONNECTOR_DNA_INPUT = _environ_bool('DISABLE_CONNECTOR_DNA')
CONNECTOR_DNA_USERNAME = environ.get('CONNECTOR_DNA_USERNAME', 'dna@connector.com')
CONNECTOR_DNA_PASSWORD = environ.get('CONNECTOR_DNA_PASSWORD', '')
CONNECTOR_DNA_URL= environ.get('CONNECTOR_DNA_URL', '')
CONNECTOR_DNA_PREFIX = BACKEND_API_PREFIX + '/connectors/dna'
CONNECTOR_DNA_HTTPS_PROXY = environ.get('CONNECTOR_DNA_HTTPS_PROXY', '')
CONNECTOR_DNA_HTTP_PROXY = environ.get('CONNECTOR_DNA_HTTP_PROXY', '')
CONNECTOR_DNA_EXPOSED_URL = environ.get('CONNECTOR_DNA_EXPOSED_URL', '')
# INEREC
CONNECTOR_INEREC_USERNAME = environ.get('CONNECTOR_INEREC_USERNAME', 'inerec@connector.com')
CONNECTOR_INEREC_URL= environ.get('CONNECTOR_INEREC_URL', '')
CONNECTOR_INEREC_HTTPS_PROXY = environ.get('CONNECTOR_INEREC_HTTPS_PROXY', '')
CONNECTOR_INEREC_HTTP_PROXY = environ.get('CONNECTOR_INEREC_HTTP_PROXY', '')

# PFTD
DISABLE_PFTD = _environ_bool('DISABLE_PFTD')
PFTD_TESTING_STUB = _environ_bool('PFTD_TESTING_STUB')
PFTD_URL = environ.get('PFTD_URL', '')
PFTD_CANAL_TYPE = _environ_int('PFTD_CANAL_TYPE', 0)
PFTD_CANAL_ID = environ.get('PFTD_CANAL_ID', '')
PFTD_TIMEOUT= _environ_int('PFTD_TIMEOUT', 30)
PFTD_RETRY = _environ_int('PFTD_RETRY', 0)  # default: no retry
PFTD_RETRY_BACKOFF_FACTOR = _environ_float('PFTD_RETRY_BACKOFF_FACTOR', 0.0)
PFTD_HTTP_PROXY = environ.get('PFTD_HTTP_PROXY', '')
PFTD_HTTPS_PROXY = environ.get('PFTD_HTTPS_PROXY', '')
PFTD_CERTIFICATE = environ.get('PFTD_CERTIFICATE', '')


### Auth ###
TOKEN_VALIDITY = _environ_int('TOKEN_VALIDITY', 24 * 3600)  # default: 1 day
REMEMBER_ME_TOKEN_VALIDITY = _environ_int('REMEMBER_ME_TOKEN_VALIDITY', 30 * 24 * 3600)  # default: 1 month
TOKEN_FRESHNESS_VALIDITY = _environ_int('TOKEN_FRESHNESS_VALIDITY', 0)  # default: 0mn
PASSWORD_EXPIRY_DATE = _environ_int('PASSWORD_EXPIRY_DATE', 80 * 24 * 3600) # default: 80 days
SYSTEM_PASSWORD_EXPIRY_DATE = _environ_int('SYSTEM_PASSWORD_EXPIRY_DATE', 0) # default: infinite

### Emails
DISABLE_MAIL = environ.get('DISABLE_MAIL', '').lower() == 'true'
MAIL_DEBUG = environ.get('MAIL_DEBUG', '').lower() == 'true' # VERY DANGEROUS
MAIL_SERVER = environ.get('MAIL_SERVER', '127.0.0.1')
MAIL_PORT = environ.get('MAIL_SERVER_PORT', 25)
MAIL_USE_TLS = _environ_bool('MAIL_USE_TLS')
MAIL_USE_SSL = _environ_bool('MAIL_USE_SSL')
MAIL_DEBUG = _environ_bool('MAIL_DEBUG')
MAIL_USERNAME = environ.get('MAIL_USERNAME', '')
MAIL_PASSWORD = environ.get('MAIL_PASSWORD', '')
MAIL_DEFAULT_SENDER = environ.get('MAIL_DEFAULT_SENDER', 'postmaster@asile.minint.local')
MAIL_ALERT_SENDER = environ.get('MAIL_ALERT_SENDER', 'ALERTE SI AEF <alerte-si-aef-dgef@interieur.gouv.fr>')

### Authomatic ###
AUTHOMATIC = {
}

### CORS ###
CORS_ORIGINS = environ.get('CORS_ORIGINS', 'http://localhost:9000').split(';')
CORS_ALLOW_HEADERS = ['Accept', 'Content-type', 'Authorization', 'If-Match', 'Cache-Control', 'X-Use-Accreditation']
CORS_EXPOSE_HEADERS = CORS_ALLOW_HEADERS
CORS_SUPPORTS_CREDENTIALS = True
CORS_MAX_AGE = 21600

### Feature Flags ###
FF_CONSOMMATION_TTE = _environ_bool('FF_CONSOMMATION_TTE')
FF_ENABLE_MAIL_ALERT = _environ_bool('FF_ENABLE_MAIL_ALERT')
FF_MAIL_ALERT_PREFECTURE_IDS = environ.get('FF_MAIL_ALERT_PREFECTURE_IDS', '').split(',')
FF_ENABLE_RABBIT = _environ_bool('FF_ENABLE_RABBIT', 'true')
